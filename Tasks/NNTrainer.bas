'Feedforward neural network (FNN), also commonly known as a multilayer perceptron (MLP).
'INPUTS,HIDDEN,OUTPUTS,EPOCHS,LEARN_RATE,CSVFILE,START_AT_LINE(0 = none),LINES_COUNT(0 = none),
'2,4,1,10,0.0001,JadeChartreuseDromiceiomimusNNXOR,0,0,

SRND(1911)

AVG_ERROR=0.0
TOTALCOUNT=0
STRLINE=""
LASTLINE=""
LINELIST=LIST()
ARGUMENTS=LIST()
ARGUMENTS=CSV2LIST(INPUTPAYLOAD)
IINPUTS=VAL(GET(ARGUMENTS,0))
IHIDDEN=VAL(GET(ARGUMENTS,1))
IOUTPUTS=VAL(GET(ARGUMENTS,2))
IEPOCHS=VAL(GET(ARGUMENTS,3))
LEARN_RATE=VAL(GET(ARGUMENTS,4))  
TFILE=GET(ARGUMENTS,5)
STARTAT=VAL(GET(ARGUMENTS,6))
LCOUNT=VAL(GET(ARGUMENTS,7))
DIM TRAINING_INPUT(IINPUTS)
DIM TRAINING_OUTPUT(IOUTPUTS)
DIM HIDDENLAYER(IHIDDEN)
DIM OUTPUTLAYER(IOUTPUTS)
DIM HIDDENLAYERBIAS(IHIDDEN)
DIM OUTPUTLAYERBIAS(IOUTPUTS) 
DIM HIDDENWEIGHTS(IINPUTS,IHIDDEN)
DIM OUTPUTWEIGHTS(IHIDDEN,IOUTPUTS)
DIM TOTAL_ERROR(IOUTPUTS)

DEF SERIALIZE()
  SOUT="INPUTS," + STR(IINPUTS) + ","
  SOUT=SOUT+"HIDDEN," + STR(IHIDDEN) + ","
  SOUT=SOUT+"OUTPUTS," + STR(IOUTPUTS) + ","
  
  SOUT=SOUT+"HIDDENWEIGHTS,"
  FOR J = 0 TO IHIDDEN - 1
    FOR K = 0 TO IINPUTS - 1
      SOUT=SOUT+STR(HIDDENWEIGHTS(K,J))+","
    NEXT K
  NEXT J

  SOUT=SOUT+"HIDDENBIASES,"
  FOR J = 0 TO IHIDDEN - 1
    SOUT=SOUT+STR(HIDDENLAYERBIAS(J))+","
  NEXT J

  SOUT=SOUT+"OUTPUTWEIGHTS,"
  FOR J = 0 TO IOUTPUTS - 1
    FOR K = 0 TO IHIDDEN - 1 
      SOUT=SOUT+STR(OUTPUTWEIGHTS(K,J))+","
    NEXT K
  NEXT J

  SOUT=SOUT+"OUTPUTBIASES,"
  FOR J = 0 TO IOUTPUTS - 1
      SOUT=SOUT+STR(OUTPUTLAYERBIAS(J))+"," 
  NEXT J
  RETURN SOUT
ENDDEF

DEF SIGMOID(X) 
  RETURN 1.0 / (1.0 + EXP(-X))
ENDDEF

DEF DSIGMOID(X) 
  RETURN X * (1.0 - X)  
ENDDEF

DEF SKIPTOLINE(X)    
  IF X > 0 THEN    
    RESETFPOS()
    FOR Z = 0 TO X - 1
      TMPLINE=READLINE()
      PRINT "SKIPPED: ",TMPLINE;
    NEXT Z
  ENDIF 
ENDDEF

FOR I = 0 TO IINPUTS - 1 
  FOR J = 0 TO IHIDDEN - 1
    HIDDENWEIGHTS(I,J) = RND
  NEXT J
NEXT I

FOR I = 0 TO IHIDDEN - 1
  HIDDENLAYERBIAS(I) = RND
  FOR J = 0 TO IOUTPUTS - 1
    OUTPUTWEIGHTS(I,J) = RND
  NEXT J
NEXT I

FOR I = 0 TO IOUTPUTS - 1
  OUTPUTLAYERBIAS(I) = RND
NEXT I

FSIZE=DOWNLOAD(TFILE)  
IF FSIZE <= 0 THEN 
  PRINT "Cant get file";
  EXIT
ENDIF


FOR I = 0 TO IEPOCHS
  TOTALCOUNT = 0
  RESETFPOS()
  LASTLINE = ""

  ' Skip lines if provided
  IF STARTAT > 0 THEN 
    SKIPTOLINE(STARTAT)
  ENDIF
   
  FOR J = 0 TO IOUTPUTS - 1
    TOTAL_ERROR(J) = 0.0
  NEXT J

  WHILE TRUE
      STRLINE=READLINE()     

      ' Break when given limit of lines reached
      IF LCOUNT > 0 AND TOTALCOUNT >= LCOUNT THEN
        EXIT
      ENDIF

      ' No more to read, break while
      IF STRLINE = "" THEN         
        EXIT
      ENDIF

      CLEAR(LINELIST) 
      LINELIST=CSV2LIST(STRLINE)
       
      FOR K = 0 TO IINPUTS - 1
        TRAINING_INPUT(K) = VAL(GET(LINELIST,K))         
      NEXT K
      FOR K = 0 TO IOUTPUTS - 1
        TRAINING_OUTPUT(K) = VAL(GET(LINELIST,IINPUTS+K))            
      NEXT K  

      ' FWD PASS
      FOR J = 0 TO IHIDDEN - 1
        ACTIVATION = HIDDENLAYERBIAS(J)
        FOR K = 0 TO IINPUTS - 1 
          ACTIVATION = ACTIVATION + (TRAINING_INPUT(K) * HIDDENWEIGHTS(K,J) )
        NEXT K
        HIDDENLAYER(J) = SIGMOID(ACTIVATION)
      NEXT J

      FOR J = 0 TO IOUTPUTS - 1
        ACTIVATION = OUTPUTLAYERBIAS(J)
        FOR K = 0 TO IHIDDEN - 1
          ACTIVATION = ACTIVATION + (HIDDENLAYER(K) * OUTPUTWEIGHTS(K,J))
        NEXT K
        OUTPUTLAYER(J) = SIGMOID(ACTIVATION)
      NEXT J 

      ' BACKPROPAGATION 
      DIM DELTAOUTPUT(IOUTPUTS) 
      FOR J = 0 TO IOUTPUTS - 1
        ERROROUTPUT = TRAINING_OUTPUT(J) - OUTPUTLAYER(J)
        DELTAOUTPUT(J) = ERROROUTPUT * DSIGMOID(OUTPUTLAYER(J))        
        TOTAL_ERROR(J) = TOTAL_ERROR(J) + ABS(ERROROUTPUT)
      NEXT J

      DIM DELTAHIDDEN(IHIDDEN)
      FOR J = 0 TO IHIDDEN - 1
        ERRORHIDDEN = 0.0f
        FOR K = 0 TO IOUTPUTS -1
          ERRORHIDDEN = DELTAOUTPUT(K) * OUTPUTWEIGHTS(J,K)
        NEXT K
        DELTAHIDDEN(J) = ERRORHIDDEN * DSIGMOID(HIDDENLAYER(J))
      NEXT J

      FOR J = 0 TO IOUTPUTS - 1
        OUTPUTLAYERBIAS(J) = OUTPUTLAYERBIAS(J) + (DELTAOUTPUT(J) * LEARN_RATE)
        FOR K = 0 TO IHIDDEN -1 
          OUTPUTWEIGHTS(K,J) = OUTPUTWEIGHTS(K,J) + (HIDDENLAYER(K) * DELTAOUTPUT(J) * LEARN_RATE)
        NEXT K
      NEXT J

      FOR J = 0 TO IHIDDEN - 1
        HIDDENLAYERBIAS(J) = HIDDENLAYERBIAS(J) + (DELTAHIDDEN(J) * LEARN_RATE)
        FOR K = 0 TO IINPUTS -1
          HIDDENWEIGHTS(K,J) = HIDDENWEIGHTS(K,J) + (TRAINING_INPUT(K) * DELTAHIDDEN(J) * LEARN_RATE)
        NEXT K
      NEXT J 
    TOTALCOUNT = TOTALCOUNT + 1
    PRINT STRLINE," TOTAL ",TOTALCOUNT;
  WEND   

  AVG_ERROR = 0.0
  FOR J = 0 TO IOUTPUTS - 1
    AVG_ERROR = AVG_ERROR + (TOTAL_ERROR(J) / FSIZE)
  NEXT J
  AVG_ERROR = AVG_ERROR / IOUTPUTS
  PRINT "EPOCH: ", I ," Average Error: ", AVG_ERROR;

NEXT I

SOUT=SERIALIZE()
OUTPUTPAYLOAD=TFILE+",ERROR,"+STR(AVG_ERROR)+","+SOUT

